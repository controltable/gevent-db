A gevent cooperative database pool using socketpair as bidirectional pipes with regular python threads
gevent-db uses pipes to trigger events between the gevent main thread and database connection threads

gevent-db is a pyodbc wrapper:
http://code.google.com/p/pyodbc/

DBPool initializes a connection pool with given odbc connection string and pool size

pool = db.DBPool('DSN=test',10)

DBPool.get retrieves a connection from the pool, and blocks if no connections are available
The connection destructor releases the connection back to the pool when the connection goes out of scope

conn = pool.get()

example: database benchmarking

requests = 1000
concurrency = 10 
sql = 'SELECT SYSDATE FROM dual'

timings = []
def timer(pool,sql):
    conn = pool.get()
    t0 = time.time()
    cursor = conn.cursor()
    cursor.execute(sql)
    timings.append(time.time()-t0)

pool = db.DBPool('DSN=test',concurrency)

greenlets = []
for i in xrange(requests):
    greenlets.append(gevent.spawn(timer,pool,sql))

for g in greenlets():
    g.wait()

print '66%% %f' % percentile(timings,0.66)
print '90%% %f' % percentile(timings,0.90)
print '99%% %f' % percentile(timings,0.99)
print '99.9%% %f' % percentile(timings,0.999)
print '100%% %f' % percentile(timings,1.00)

